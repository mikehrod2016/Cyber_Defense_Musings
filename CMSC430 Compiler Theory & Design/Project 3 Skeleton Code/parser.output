Terminals unused in grammar

    ELSIFS


Grammar

    0 $accept: function $end

    1 function: function_header optional_variables body ';'

    2 function_header: FUNCTION IDENTIFIER parameter parameters RETURNS type ';'
    3                | error

    4 type: INTEGER
    5     | REAL
    6     | CHARACTER

    7 optional_variables: optional_variables variable
    8                   | ε
    9                   | error

   10 parameters: ',' parameter parameters
   11           | ε

   12 parameter: IDENTIFIER ':' type
   13          | ε

   14 variable: IDENTIFIER ':' type IS statement ';'
   15         | IDENTIFIER ':' LIST OF type IS list ';'

   16 list: '(' expressions ')'

   17 expressions: expressions ',' expression
   18            | expression

   19 body: BEGIN_ statement_ END

   20 statement_: statement ';'
   21           | error ';'

   22 direction: LEFT
   23          | RIGHT

   24 operator: ADDOP
   25         | MULOP

   26 list_choice: list
   27            | IDENTIFIER

   28 elsifs: elsifs elsif
   29       | ε

   30 elsif: ELSIF condition THEN statement_

   31 statement: expression
   32          | WHEN condition ',' expression ':' expression
   33          | FOLD direction operator list_choice ENDFOLD
   34          | IF condition THEN statement_ elsifs ELSE statement_ ENDIF
   35          | SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH

   36 cases: cases case
   37      | ε

   38 case: CASE INT_LITERAL ARROW statement ';'

   39 condition: condition OROP andcondition
   40          | andcondition

   41 andcondition: andcondition ANDOP notcondition
   42             | notcondition

   43 notcondition: NOTOP relation
   44             | relation

   45 relation: '(' condition ')'
   46         | expression RELOP expression

   47 expression: expression ADDOP term
   48           | term

   49 term: term MULOP exprimary
   50     | term REMOP exprimary
   51     | exprimary

   52 exprimary: unprimary EXPOP exprimary
   53          | unprimary

   54 unprimary: NEGOP INT_LITERAL
   55          | NEGOP REAL_LITERAL
   56          | NEGOP IDENTIFIER
   57          | primary

   58 primary: '(' expression ')'
   59        | INT_LITERAL
   60        | REAL_LITERAL
   61        | CHAR_LITERAL
   62        | IDENTIFIER '(' expression ')'
   63        | IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 16 45 58 62
    ')' (41) 16 45 58 62
    ',' (44) 10 17 32
    ':' (58) 12 14 15 32
    ';' (59) 1 2 14 15 20 21 35 38
    error (256) 3 9 21
    IDENTIFIER <iden> (258) 2 12 14 15 27 56 62 63
    INT_LITERAL <value> (259) 38 54 59
    CHAR_LITERAL <value> (260) 61
    REAL_LITERAL <value> (261) 55 60
    ADDOP <oper> (262) 24 47
    MULOP <oper> (263) 25 49
    ANDOP <oper> (264) 41
    RELOP <oper> (265) 46
    OROP <oper> (266) 39
    NOTOP <oper> (267) 43
    REMOP <oper> (268) 50
    NEGOP <oper> (269) 54 55 56
    EXPOP <oper> (270) 52
    ARROW (271) 35 38
    BEGIN_ (272) 19
    CASE (273) 38
    CHARACTER (274) 6
    ELSE (275) 34
    END (276) 19
    ENDSWITCH (277) 35
    FUNCTION (278) 2
    INTEGER (279) 4
    IS (280) 14 15 35
    LIST (281) 15
    OF (282) 15
    OTHERS (283) 35
    RETURNS (284) 2
    SWITCH (285) 35
    WHEN (286) 32
    ELSIF (287) 30
    ELSIFS (288)
    ENDFOLD (289) 33
    ENDIF (290) 34
    FOLD (291) 33
    IF (292) 34
    LEFT (293) 22
    REAL (294) 5
    RIGHT (295) 23
    THEN (296) 30 34


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    function (48)
        on left: 1
        on right: 0
    function_header (49)
        on left: 2 3
        on right: 1
    type (50)
        on left: 4 5 6
        on right: 2 12 14 15
    optional_variables (51)
        on left: 7 8 9
        on right: 1 7
    parameters (52)
        on left: 10 11
        on right: 2 10
    parameter (53)
        on left: 12 13
        on right: 2 10
    variable (54)
        on left: 14 15
        on right: 7
    list <list> (55)
        on left: 16
        on right: 15 26
    expressions <list> (56)
        on left: 17 18
        on right: 16 17
    body <value> (57)
        on left: 19
        on right: 1
    statement_ <value> (58)
        on left: 20 21
        on right: 19 30 34
    direction <value> (59)
        on left: 22 23
        on right: 33
    operator <value> (60)
        on left: 24 25
        on right: 33
    list_choice <list> (61)
        on left: 26 27
        on right: 33
    elsifs <value> (62)
        on left: 28 29
        on right: 28 34
    elsif <value> (63)
        on left: 30
        on right: 28
    statement <value> (64)
        on left: 31 32 33 34 35
        on right: 14 20 35 38
    cases <value> (65)
        on left: 36 37
        on right: 35 36
    case <value> (66)
        on left: 38
        on right: 36
    condition <value> (67)
        on left: 39 40
        on right: 30 32 34 39 45
    andcondition <value> (68)
        on left: 41 42
        on right: 39 40 41
    notcondition <value> (69)
        on left: 43 44
        on right: 41 42
    relation <value> (70)
        on left: 45 46
        on right: 43 44
    expression <value> (71)
        on left: 47 48
        on right: 17 18 31 32 35 46 47 58 62
    term <value> (72)
        on left: 49 50 51
        on right: 47 48 49 50
    exprimary <value> (73)
        on left: 52 53
        on right: 49 50 51 52
    unprimary <value> (74)
        on left: 54 55 56 57
        on right: 52 53
    primary <value> (75)
        on left: 58 59 60 61 62 63
        on right: 57


State 0

    0 $accept: • function $end

    error     shift, and go to state 1
    FUNCTION  shift, and go to state 2

    function         go to state 3
    function_header  go to state 4


State 1

    3 function_header: error •

    $default  reduce using rule 3 (function_header)


State 2

    2 function_header: FUNCTION • IDENTIFIER parameter parameters RETURNS type ';'

    IDENTIFIER  shift, and go to state 5


State 3

    0 $accept: function • $end

    $end  shift, and go to state 6


State 4

    1 function: function_header • optional_variables body ';'

    error  shift, and go to state 7

    IDENTIFIER  reduce using rule 8 (optional_variables)
    BEGIN_      reduce using rule 8 (optional_variables)

    optional_variables  go to state 8


State 5

    2 function_header: FUNCTION IDENTIFIER • parameter parameters RETURNS type ';'

    IDENTIFIER  shift, and go to state 9

    $default  reduce using rule 13 (parameter)

    parameter  go to state 10


State 6

    0 $accept: function $end •

    $default  accept


State 7

    9 optional_variables: error •

    $default  reduce using rule 9 (optional_variables)


State 8

    1 function: function_header optional_variables • body ';'
    7 optional_variables: optional_variables • variable

    IDENTIFIER  shift, and go to state 11
    BEGIN_      shift, and go to state 12

    variable  go to state 13
    body      go to state 14


State 9

   12 parameter: IDENTIFIER • ':' type

    ':'  shift, and go to state 15


State 10

    2 function_header: FUNCTION IDENTIFIER parameter • parameters RETURNS type ';'

    ','  shift, and go to state 16

    $default  reduce using rule 11 (parameters)

    parameters  go to state 17


State 11

   14 variable: IDENTIFIER • ':' type IS statement ';'
   15         | IDENTIFIER • ':' LIST OF type IS list ';'

    ':'  shift, and go to state 18


State 12

   19 body: BEGIN_ • statement_ END

    error         shift, and go to state 19
    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    FOLD          shift, and go to state 27
    IF            shift, and go to state 28
    '('           shift, and go to state 29

    statement_  go to state 30
    statement   go to state 31
    expression  go to state 32
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 13

    7 optional_variables: optional_variables variable •

    $default  reduce using rule 7 (optional_variables)


State 14

    1 function: function_header optional_variables body • ';'

    ';'  shift, and go to state 37


State 15

   12 parameter: IDENTIFIER ':' • type

    CHARACTER  shift, and go to state 38
    INTEGER    shift, and go to state 39
    REAL       shift, and go to state 40

    type  go to state 41


State 16

   10 parameters: ',' • parameter parameters

    IDENTIFIER  shift, and go to state 9

    $default  reduce using rule 13 (parameter)

    parameter  go to state 42


State 17

    2 function_header: FUNCTION IDENTIFIER parameter parameters • RETURNS type ';'

    RETURNS  shift, and go to state 43


State 18

   14 variable: IDENTIFIER ':' • type IS statement ';'
   15         | IDENTIFIER ':' • LIST OF type IS list ';'

    CHARACTER  shift, and go to state 38
    INTEGER    shift, and go to state 39
    LIST       shift, and go to state 44
    REAL       shift, and go to state 40

    type  go to state 45


State 19

   21 statement_: error • ';'

    ';'  shift, and go to state 46


State 20

   62 primary: IDENTIFIER • '(' expression ')'
   63        | IDENTIFIER •

    '('  shift, and go to state 47

    $default  reduce using rule 63 (primary)


State 21

   59 primary: INT_LITERAL •

    $default  reduce using rule 59 (primary)


State 22

   61 primary: CHAR_LITERAL •

    $default  reduce using rule 61 (primary)


State 23

   60 primary: REAL_LITERAL •

    $default  reduce using rule 60 (primary)


State 24

   54 unprimary: NEGOP • INT_LITERAL
   55          | NEGOP • REAL_LITERAL
   56          | NEGOP • IDENTIFIER

    IDENTIFIER    shift, and go to state 48
    INT_LITERAL   shift, and go to state 49
    REAL_LITERAL  shift, and go to state 50


State 25

   35 statement: SWITCH • expression IS cases OTHERS ARROW statement ';' ENDSWITCH

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    expression  go to state 51
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 26

   32 statement: WHEN • condition ',' expression ':' expression

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NOTOP         shift, and go to state 52
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 53

    condition     go to state 54
    andcondition  go to state 55
    notcondition  go to state 56
    relation      go to state 57
    expression    go to state 58
    term          go to state 33
    exprimary     go to state 34
    unprimary     go to state 35
    primary       go to state 36


State 27

   33 statement: FOLD • direction operator list_choice ENDFOLD

    LEFT   shift, and go to state 59
    RIGHT  shift, and go to state 60

    direction  go to state 61


State 28

   34 statement: IF • condition THEN statement_ elsifs ELSE statement_ ENDIF

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NOTOP         shift, and go to state 52
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 53

    condition     go to state 62
    andcondition  go to state 55
    notcondition  go to state 56
    relation      go to state 57
    expression    go to state 58
    term          go to state 33
    exprimary     go to state 34
    unprimary     go to state 35
    primary       go to state 36


State 29

   58 primary: '(' • expression ')'

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    expression  go to state 63
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 30

   19 body: BEGIN_ statement_ • END

    END  shift, and go to state 64


State 31

   20 statement_: statement • ';'

    ';'  shift, and go to state 65


State 32

   31 statement: expression •
   47 expression: expression • ADDOP term

    ADDOP  shift, and go to state 66

    $default  reduce using rule 31 (statement)


State 33

   48 expression: term •
   49 term: term • MULOP exprimary
   50     | term • REMOP exprimary

    MULOP  shift, and go to state 67
    REMOP  shift, and go to state 68

    $default  reduce using rule 48 (expression)


State 34

   51 term: exprimary •

    $default  reduce using rule 51 (term)


State 35

   52 exprimary: unprimary • EXPOP exprimary
   53          | unprimary •

    EXPOP  shift, and go to state 69

    $default  reduce using rule 53 (exprimary)


State 36

   57 unprimary: primary •

    $default  reduce using rule 57 (unprimary)


State 37

    1 function: function_header optional_variables body ';' •

    $default  reduce using rule 1 (function)


State 38

    6 type: CHARACTER •

    $default  reduce using rule 6 (type)


State 39

    4 type: INTEGER •

    $default  reduce using rule 4 (type)


State 40

    5 type: REAL •

    $default  reduce using rule 5 (type)


State 41

   12 parameter: IDENTIFIER ':' type •

    $default  reduce using rule 12 (parameter)


State 42

   10 parameters: ',' parameter • parameters

    ','  shift, and go to state 16

    $default  reduce using rule 11 (parameters)

    parameters  go to state 70


State 43

    2 function_header: FUNCTION IDENTIFIER parameter parameters RETURNS • type ';'

    CHARACTER  shift, and go to state 38
    INTEGER    shift, and go to state 39
    REAL       shift, and go to state 40

    type  go to state 71


State 44

   15 variable: IDENTIFIER ':' LIST • OF type IS list ';'

    OF  shift, and go to state 72


State 45

   14 variable: IDENTIFIER ':' type • IS statement ';'

    IS  shift, and go to state 73


State 46

   21 statement_: error ';' •

    $default  reduce using rule 21 (statement_)


State 47

   62 primary: IDENTIFIER '(' • expression ')'

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    expression  go to state 74
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 48

   56 unprimary: NEGOP IDENTIFIER •

    $default  reduce using rule 56 (unprimary)


State 49

   54 unprimary: NEGOP INT_LITERAL •

    $default  reduce using rule 54 (unprimary)


State 50

   55 unprimary: NEGOP REAL_LITERAL •

    $default  reduce using rule 55 (unprimary)


State 51

   35 statement: SWITCH expression • IS cases OTHERS ARROW statement ';' ENDSWITCH
   47 expression: expression • ADDOP term

    ADDOP  shift, and go to state 66
    IS     shift, and go to state 75


State 52

   43 notcondition: NOTOP • relation

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 53

    relation    go to state 76
    expression  go to state 58
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 53

   45 relation: '(' • condition ')'
   58 primary: '(' • expression ')'

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NOTOP         shift, and go to state 52
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 53

    condition     go to state 77
    andcondition  go to state 55
    notcondition  go to state 56
    relation      go to state 57
    expression    go to state 78
    term          go to state 33
    exprimary     go to state 34
    unprimary     go to state 35
    primary       go to state 36


State 54

   32 statement: WHEN condition • ',' expression ':' expression
   39 condition: condition • OROP andcondition

    OROP  shift, and go to state 79
    ','   shift, and go to state 80


State 55

   40 condition: andcondition •
   41 andcondition: andcondition • ANDOP notcondition

    ANDOP  shift, and go to state 81

    $default  reduce using rule 40 (condition)


State 56

   42 andcondition: notcondition •

    $default  reduce using rule 42 (andcondition)


State 57

   44 notcondition: relation •

    $default  reduce using rule 44 (notcondition)


State 58

   46 relation: expression • RELOP expression
   47 expression: expression • ADDOP term

    ADDOP  shift, and go to state 66
    RELOP  shift, and go to state 82


State 59

   22 direction: LEFT •

    $default  reduce using rule 22 (direction)


State 60

   23 direction: RIGHT •

    $default  reduce using rule 23 (direction)


State 61

   33 statement: FOLD direction • operator list_choice ENDFOLD

    ADDOP  shift, and go to state 83
    MULOP  shift, and go to state 84

    operator  go to state 85


State 62

   34 statement: IF condition • THEN statement_ elsifs ELSE statement_ ENDIF
   39 condition: condition • OROP andcondition

    OROP  shift, and go to state 79
    THEN  shift, and go to state 86


State 63

   47 expression: expression • ADDOP term
   58 primary: '(' expression • ')'

    ADDOP  shift, and go to state 66
    ')'    shift, and go to state 87


State 64

   19 body: BEGIN_ statement_ END •

    $default  reduce using rule 19 (body)


State 65

   20 statement_: statement ';' •

    $default  reduce using rule 20 (statement_)


State 66

   47 expression: expression ADDOP • term

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    term       go to state 88
    exprimary  go to state 34
    unprimary  go to state 35
    primary    go to state 36


State 67

   49 term: term MULOP • exprimary

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    exprimary  go to state 89
    unprimary  go to state 35
    primary    go to state 36


State 68

   50 term: term REMOP • exprimary

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    exprimary  go to state 90
    unprimary  go to state 35
    primary    go to state 36


State 69

   52 exprimary: unprimary EXPOP • exprimary

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    exprimary  go to state 91
    unprimary  go to state 35
    primary    go to state 36


State 70

   10 parameters: ',' parameter parameters •

    $default  reduce using rule 10 (parameters)


State 71

    2 function_header: FUNCTION IDENTIFIER parameter parameters RETURNS type • ';'

    ';'  shift, and go to state 92


State 72

   15 variable: IDENTIFIER ':' LIST OF • type IS list ';'

    CHARACTER  shift, and go to state 38
    INTEGER    shift, and go to state 39
    REAL       shift, and go to state 40

    type  go to state 93


State 73

   14 variable: IDENTIFIER ':' type IS • statement ';'

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    FOLD          shift, and go to state 27
    IF            shift, and go to state 28
    '('           shift, and go to state 29

    statement   go to state 94
    expression  go to state 32
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 74

   47 expression: expression • ADDOP term
   62 primary: IDENTIFIER '(' expression • ')'

    ADDOP  shift, and go to state 66
    ')'    shift, and go to state 95


State 75

   35 statement: SWITCH expression IS • cases OTHERS ARROW statement ';' ENDSWITCH

    $default  reduce using rule 37 (cases)

    cases  go to state 96


State 76

   43 notcondition: NOTOP relation •

    $default  reduce using rule 43 (notcondition)


State 77

   39 condition: condition • OROP andcondition
   45 relation: '(' condition • ')'

    OROP  shift, and go to state 79
    ')'   shift, and go to state 97


State 78

   46 relation: expression • RELOP expression
   47 expression: expression • ADDOP term
   58 primary: '(' expression • ')'

    ADDOP  shift, and go to state 66
    RELOP  shift, and go to state 82
    ')'    shift, and go to state 87


State 79

   39 condition: condition OROP • andcondition

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NOTOP         shift, and go to state 52
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 53

    andcondition  go to state 98
    notcondition  go to state 56
    relation      go to state 57
    expression    go to state 58
    term          go to state 33
    exprimary     go to state 34
    unprimary     go to state 35
    primary       go to state 36


State 80

   32 statement: WHEN condition ',' • expression ':' expression

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    expression  go to state 99
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 81

   41 andcondition: andcondition ANDOP • notcondition

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NOTOP         shift, and go to state 52
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 53

    notcondition  go to state 100
    relation      go to state 57
    expression    go to state 58
    term          go to state 33
    exprimary     go to state 34
    unprimary     go to state 35
    primary       go to state 36


State 82

   46 relation: expression RELOP • expression

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    expression  go to state 101
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 83

   24 operator: ADDOP •

    $default  reduce using rule 24 (operator)


State 84

   25 operator: MULOP •

    $default  reduce using rule 25 (operator)


State 85

   33 statement: FOLD direction operator • list_choice ENDFOLD

    IDENTIFIER  shift, and go to state 102
    '('         shift, and go to state 103

    list         go to state 104
    list_choice  go to state 105


State 86

   34 statement: IF condition THEN • statement_ elsifs ELSE statement_ ENDIF

    error         shift, and go to state 19
    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    FOLD          shift, and go to state 27
    IF            shift, and go to state 28
    '('           shift, and go to state 29

    statement_  go to state 106
    statement   go to state 31
    expression  go to state 32
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 87

   58 primary: '(' expression ')' •

    $default  reduce using rule 58 (primary)


State 88

   47 expression: expression ADDOP term •
   49 term: term • MULOP exprimary
   50     | term • REMOP exprimary

    MULOP  shift, and go to state 67
    REMOP  shift, and go to state 68

    $default  reduce using rule 47 (expression)


State 89

   49 term: term MULOP exprimary •

    $default  reduce using rule 49 (term)


State 90

   50 term: term REMOP exprimary •

    $default  reduce using rule 50 (term)


State 91

   52 exprimary: unprimary EXPOP exprimary •

    $default  reduce using rule 52 (exprimary)


State 92

    2 function_header: FUNCTION IDENTIFIER parameter parameters RETURNS type ';' •

    $default  reduce using rule 2 (function_header)


State 93

   15 variable: IDENTIFIER ':' LIST OF type • IS list ';'

    IS  shift, and go to state 107


State 94

   14 variable: IDENTIFIER ':' type IS statement • ';'

    ';'  shift, and go to state 108


State 95

   62 primary: IDENTIFIER '(' expression ')' •

    $default  reduce using rule 62 (primary)


State 96

   35 statement: SWITCH expression IS cases • OTHERS ARROW statement ';' ENDSWITCH
   36 cases: cases • case

    CASE    shift, and go to state 109
    OTHERS  shift, and go to state 110

    case  go to state 111


State 97

   45 relation: '(' condition ')' •

    $default  reduce using rule 45 (relation)


State 98

   39 condition: condition OROP andcondition •
   41 andcondition: andcondition • ANDOP notcondition

    ANDOP  shift, and go to state 81

    $default  reduce using rule 39 (condition)


State 99

   32 statement: WHEN condition ',' expression • ':' expression
   47 expression: expression • ADDOP term

    ADDOP  shift, and go to state 66
    ':'    shift, and go to state 112


State 100

   41 andcondition: andcondition ANDOP notcondition •

    $default  reduce using rule 41 (andcondition)


State 101

   46 relation: expression RELOP expression •
   47 expression: expression • ADDOP term

    ADDOP  shift, and go to state 66

    $default  reduce using rule 46 (relation)


State 102

   27 list_choice: IDENTIFIER •

    $default  reduce using rule 27 (list_choice)


State 103

   16 list: '(' • expressions ')'

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    expressions  go to state 113
    expression   go to state 114
    term         go to state 33
    exprimary    go to state 34
    unprimary    go to state 35
    primary      go to state 36


State 104

   26 list_choice: list •

    $default  reduce using rule 26 (list_choice)


State 105

   33 statement: FOLD direction operator list_choice • ENDFOLD

    ENDFOLD  shift, and go to state 115


State 106

   34 statement: IF condition THEN statement_ • elsifs ELSE statement_ ENDIF

    $default  reduce using rule 29 (elsifs)

    elsifs  go to state 116


State 107

   15 variable: IDENTIFIER ':' LIST OF type IS • list ';'

    '('  shift, and go to state 103

    list  go to state 117


State 108

   14 variable: IDENTIFIER ':' type IS statement ';' •

    $default  reduce using rule 14 (variable)


State 109

   38 case: CASE • INT_LITERAL ARROW statement ';'

    INT_LITERAL  shift, and go to state 118


State 110

   35 statement: SWITCH expression IS cases OTHERS • ARROW statement ';' ENDSWITCH

    ARROW  shift, and go to state 119


State 111

   36 cases: cases case •

    $default  reduce using rule 36 (cases)


State 112

   32 statement: WHEN condition ',' expression ':' • expression

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    expression  go to state 120
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 113

   16 list: '(' expressions • ')'
   17 expressions: expressions • ',' expression

    ','  shift, and go to state 121
    ')'  shift, and go to state 122


State 114

   18 expressions: expression •
   47 expression: expression • ADDOP term

    ADDOP  shift, and go to state 66

    $default  reduce using rule 18 (expressions)


State 115

   33 statement: FOLD direction operator list_choice ENDFOLD •

    $default  reduce using rule 33 (statement)


State 116

   28 elsifs: elsifs • elsif
   34 statement: IF condition THEN statement_ elsifs • ELSE statement_ ENDIF

    ELSE   shift, and go to state 123
    ELSIF  shift, and go to state 124

    elsif  go to state 125


State 117

   15 variable: IDENTIFIER ':' LIST OF type IS list • ';'

    ';'  shift, and go to state 126


State 118

   38 case: CASE INT_LITERAL • ARROW statement ';'

    ARROW  shift, and go to state 127


State 119

   35 statement: SWITCH expression IS cases OTHERS ARROW • statement ';' ENDSWITCH

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    FOLD          shift, and go to state 27
    IF            shift, and go to state 28
    '('           shift, and go to state 29

    statement   go to state 128
    expression  go to state 32
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 120

   32 statement: WHEN condition ',' expression ':' expression •
   47 expression: expression • ADDOP term

    ADDOP  shift, and go to state 66

    $default  reduce using rule 32 (statement)


State 121

   17 expressions: expressions ',' • expression

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 29

    expression  go to state 129
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 122

   16 list: '(' expressions ')' •

    $default  reduce using rule 16 (list)


State 123

   34 statement: IF condition THEN statement_ elsifs ELSE • statement_ ENDIF

    error         shift, and go to state 19
    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    FOLD          shift, and go to state 27
    IF            shift, and go to state 28
    '('           shift, and go to state 29

    statement_  go to state 130
    statement   go to state 31
    expression  go to state 32
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 124

   30 elsif: ELSIF • condition THEN statement_

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NOTOP         shift, and go to state 52
    NEGOP         shift, and go to state 24
    '('           shift, and go to state 53

    condition     go to state 131
    andcondition  go to state 55
    notcondition  go to state 56
    relation      go to state 57
    expression    go to state 58
    term          go to state 33
    exprimary     go to state 34
    unprimary     go to state 35
    primary       go to state 36


State 125

   28 elsifs: elsifs elsif •

    $default  reduce using rule 28 (elsifs)


State 126

   15 variable: IDENTIFIER ':' LIST OF type IS list ';' •

    $default  reduce using rule 15 (variable)


State 127

   38 case: CASE INT_LITERAL ARROW • statement ';'

    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    FOLD          shift, and go to state 27
    IF            shift, and go to state 28
    '('           shift, and go to state 29

    statement   go to state 132
    expression  go to state 32
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 128

   35 statement: SWITCH expression IS cases OTHERS ARROW statement • ';' ENDSWITCH

    ';'  shift, and go to state 133


State 129

   17 expressions: expressions ',' expression •
   47 expression: expression • ADDOP term

    ADDOP  shift, and go to state 66

    $default  reduce using rule 17 (expressions)


State 130

   34 statement: IF condition THEN statement_ elsifs ELSE statement_ • ENDIF

    ENDIF  shift, and go to state 134


State 131

   30 elsif: ELSIF condition • THEN statement_
   39 condition: condition • OROP andcondition

    OROP  shift, and go to state 79
    THEN  shift, and go to state 135


State 132

   38 case: CASE INT_LITERAL ARROW statement • ';'

    ';'  shift, and go to state 136


State 133

   35 statement: SWITCH expression IS cases OTHERS ARROW statement ';' • ENDSWITCH

    ENDSWITCH  shift, and go to state 137


State 134

   34 statement: IF condition THEN statement_ elsifs ELSE statement_ ENDIF •

    $default  reduce using rule 34 (statement)


State 135

   30 elsif: ELSIF condition THEN • statement_

    error         shift, and go to state 19
    IDENTIFIER    shift, and go to state 20
    INT_LITERAL   shift, and go to state 21
    CHAR_LITERAL  shift, and go to state 22
    REAL_LITERAL  shift, and go to state 23
    NEGOP         shift, and go to state 24
    SWITCH        shift, and go to state 25
    WHEN          shift, and go to state 26
    FOLD          shift, and go to state 27
    IF            shift, and go to state 28
    '('           shift, and go to state 29

    statement_  go to state 138
    statement   go to state 31
    expression  go to state 32
    term        go to state 33
    exprimary   go to state 34
    unprimary   go to state 35
    primary     go to state 36


State 136

   38 case: CASE INT_LITERAL ARROW statement ';' •

    $default  reduce using rule 38 (case)


State 137

   35 statement: SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH •

    $default  reduce using rule 35 (statement)


State 138

   30 elsif: ELSIF condition THEN statement_ •

    $default  reduce using rule 30 (elsif)
